package d021248.group.symmetric;

import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

import d021248.group.api.Operation;
import d021248.group.base.Generator;

public class Main {
    public static void main(String[] args) {
        Logger logger = Logger.getLogger(Main.class.getName());

        // Test 1: Generate S_3 and print all elements
        int n = 3;
        SymmetricGroup s3 = new SymmetricGroup(n);
        Set<Permutation> group = s3.elements();

        logger.log(Level.INFO, "S_3 generators: {0}", SymmetricGroup.generators(n));
        logger.log(Level.INFO, "S_3 elements:");
        for (Permutation p : group) {
            logger.log(Level.INFO, "{0}", p);
        }
        logger.log(Level.INFO, "Order of S_3: {0}", group.size());

        // Print multiplication table for S_3
        printMultiplicationTable(group, s3.operation());

        // Test 2: Generate subgroup of S_4 generated by (1 2 3) and (1 2)
        Permutation p1 = new Permutation(List.of(List.of(1, 2, 3)));
        Permutation p2 = new Permutation(List.of(List.of(1, 2)));
        Set<Permutation> gensSub = new LinkedHashSet<>();
        gensSub.add(p1);
        gensSub.add(p2);
        SymmetricGroup subgroup = new SymmetricGroup(4); // S_4
        Set<Permutation> subgroupElements = Generator.generate(gensSub, subgroup.operation());

        logger.log(Level.INFO, "Subgroup of S_4 generated by (1 2 3) and (1 2):");
        for (Permutation p : subgroupElements) {
            logger.log(Level.INFO, "{0}", p);
        }
        logger.log(Level.INFO, "Order of subgroup: {0}", subgroupElements.size());

        // Test 3: Identity permutation
        Permutation identity = new Permutation(List.of());

        logger.log(Level.INFO, "Identity permutation: {0}", identity);
        logger.log(Level.INFO, "Inverse of identity: {0}", identity.inverse());

        // Test 4: Inverse of a permutation
        Permutation perm = new Permutation(List.of(List.of(1, 2, 3, 4)));

        logger.log(Level.INFO, "Permutation: {0}", perm);
        logger.log(Level.INFO, "Inverse: {0}", perm.inverse());

        // Test 5: Multiply two permutations
        Permutation a = new Permutation(List.of(List.of(1, 2, 3, 4)));
        Permutation b = new Permutation(List.of(List.of(1, 4, 3, 2)));
        Permutation result = s3.operation().calculate(a, b);
        logger.log(Level.INFO, "Multiplying {0} * {1} = {2}", new Object[] { a, b, result });

        // Example: apply (1,2,3,4) to ABCD
        String input = "ABCD";
        Permutation cycle = new Permutation(List.of(List.of(1, 2, 3, 4)));
        StringBuilder output = new StringBuilder();
        for (int i = 1; i <= input.length(); i++) {
            int mapped = PermutationUtil.toMap(cycle).getOrDefault(i, i);
            output.append(input.charAt(mapped - 1));
        }
        logger.log(Level.INFO, "Applying (1 2 3 4) to ABCD gives: {0}", output.toString());

        var xxx = PermutationUtil.toMap(cycle);
        logger.log(Level.INFO, "Cycle map: {0}", xxx);
        logger.log(Level.INFO, "Cycle inverse: {0}", cycle.inverse());

    }

    /**
     * Prints the multiplication table for a set of permutations and a group
     * operation.
     */
    public static void printMultiplicationTable(Set<Permutation> elements, Operation<Permutation> operation) {
        Logger logger = Logger.getLogger(Main.class.getName());
        if (logger.isLoggable(Level.INFO)) {
            var list = new java.util.ArrayList<>(elements);
            StringBuilder sb = new StringBuilder();
            sb.append("\n\t");
            for (var col : list) {
                sb.append(col).append("\t");
            }
            sb.append("\n");
            for (var row : list) {
                sb.append(row).append("\t");
                for (var col : list) {
                    sb.append(operation.calculate(row, col)).append("\t");
                }
                sb.append("\n");
            }
            logger.log(Level.INFO, "Multiplication table:\n{0}", sb);
        }
    }
}
